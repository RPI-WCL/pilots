/* Generated By:JJTree&JavaCC: Do not edit this line. PilotsParser.java */
package pilots.compiler.parser;
import java.io.*;

public class PilotsParser/*@bgen(jjtree)*/implements PilotsParserTreeConstants, PilotsParserConstants {/*@bgen(jjtree)*/
  protected JJTPilotsParserState jjtree = new JJTPilotsParserState();

/**************************************/
/********** START OF GRAMMAR **********/
/**************************************/
/* Non-terminals */
  final public ASTPilots Pilots() throws ParseException {
 /*@bgen(jjtree) Pilots */
    ASTPilots jjtn000 = new ASTPilots(JJTPILOTS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(PROGRAM_START);
      t = jj_consume_token(VAR);
                                jjtn000.jjtSetValue( t.image );
      jj_consume_token(52);
      jj_consume_token(INPUTS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        jj_consume_token(52);
        break;
      default:
        jj_la1[1] = jj_gen;
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VAR:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          Input();
        }
      }
      jj_consume_token(OUTPUTS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        jj_consume_token(52);
        break;
      default:
        jj_la1[3] = jj_gen;
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VAR:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_2;
          }
          Output();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ERRORS:
        jj_consume_token(ERRORS);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 52:
          jj_consume_token(52);
          break;
        default:
          jj_la1[5] = jj_gen;
          label_3:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case VAR:
              ;
              break;
            default:
              jj_la1[4] = jj_gen;
              break label_3;
            }
            Error();
          }
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIGNATURES:
        jj_consume_token(SIGNATURES);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 52:
          jj_consume_token(52);
          break;
        default:
          jj_la1[8] = jj_gen;
          label_4:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case VAR:
              ;
              break;
            default:
              jj_la1[7] = jj_gen;
              break label_4;
            }
            Signature();
          }
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CORRECTS:
        jj_consume_token(CORRECTS);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 52:
          jj_consume_token(52);
          break;
        default:
          jj_la1[11] = jj_gen;
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case VAR:
              ;
              break;
            default:
              jj_la1[10] = jj_gen;
              break label_5;
            }
            Correct();
          }
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      jj_consume_token(PROGRAM_END);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        jj_consume_token(52);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Input() throws ParseException {
 /*@bgen(jjtree) Input */
    ASTInput jjtn000 = new ASTInput(JJTINPUT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String str;
    try {
      str = Vars();
      jjtn000.jjtSetValue( str );
      Dim();
      jj_consume_token(USING);
      Methods();
      jj_consume_token(52);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Output() throws ParseException {
 /*@bgen(jjtree) Output */
    ASTOutput jjtn000 = new ASTOutput(JJTOUTPUT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String str, exps, time;
    try {
      str = Vars();
      jj_consume_token(53);
      exps = Exps();
      jj_consume_token(AT);
      jj_consume_token(EVERY);
      time = Time();
      jj_consume_token(52);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetValue( str + ":" + exps + ":" + time );
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Error() throws ParseException {
 /*@bgen(jjtree) Error */
    ASTError jjtn000 = new ASTError(JJTERROR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String str, exps;
    try {
      str = Vars();
      jj_consume_token(53);
      exps = Exps();
      jj_consume_token(52);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetValue( str + ":" + exps );
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Signature() throws ParseException {
 /*@bgen(jjtree) Signature */
    ASTSignature jjtn000 = new ASTSignature(JJTSIGNATURE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String constant = "", exps;
    Token t1, t2, t3 = null;
    try {
      t1 = jj_consume_token(VAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
        constant = Const();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(53);
      t2 = jj_consume_token(VAR);
      jj_consume_token(54);
      exps = Exps();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        t3 = jj_consume_token(STRING);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESTIMATE:
        Estimate();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(52);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        if (t3 != null)
            jjtn000.jjtSetValue( t1.image + ":" + constant + ":" + t2.image + ":" + exps + ":" + t3.image);
        else
            jjtn000.jjtSetValue( t1.image + ":" + constant + ":" + t2.image + ":" + exps);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Estimate() throws ParseException {
 /*@bgen(jjtree) Estimate */
    ASTEstimate jjtn000 = new ASTEstimate(JJTESTIMATE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String exp = "";
    Token t1;
    Token t2 = new Token();
    Token t3 = new Token();
    try {
      jj_consume_token(ESTIMATE);
      t1 = jj_consume_token(VAR);
      jj_consume_token(54);
      exp = Exp();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHEN:
        jj_consume_token(WHEN);
        t2 = jj_consume_token(VAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          t3 = jj_consume_token(INTEGER);
          jj_consume_token(TIMES);
          break;
        default:
          jj_la1[17] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetValue( t1.image + ":" + t2.image + ":" + t3.image + ":" + exp);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Correct() throws ParseException {
 /*@bgen(jjtree) Correct */
    ASTCorrect jjtn000 = new ASTCorrect(JJTCORRECT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String constant = null, exp;
    Token t1, t2;
    try {
      t1 = jj_consume_token(VAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
        constant = Const();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      jj_consume_token(53);
      t2 = jj_consume_token(VAR);
      jj_consume_token(54);
      exp = Exp();
      jj_consume_token(52);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetValue( t1.image + ":" + constant + ":" + t2.image + ":" + exp );
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public String Vars() throws ParseException {
 /*@bgen(jjtree) Vars */
    ASTVars jjtn000 = new ASTVars(JJTVARS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    String str;
    try {
      t = jj_consume_token(VAR);
                str = t.image;
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(VAR);
                     str += "," + t.image;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return str;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Const() throws ParseException {
 /*@bgen(jjtree) Const */
    ASTConst jjtn000 = new ASTConst(JJTCONST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    String str;
    try {
      jj_consume_token(LPAR);
      t = jj_consume_token(VAR);
                    str = t.image;
      jj_consume_token(RPAR);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return str;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Dim() throws ParseException {
             /*@bgen(jjtree) Dim */
  ASTDim jjtn000 = new ASTDim(JJTDIM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAR);
      Exps();
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Method() throws ParseException {
 /*@bgen(jjtree) Method */
    ASTMethod jjtn000 = new ASTMethod(JJTMETHOD);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    String id, args;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLOSEST:
        t = jj_consume_token(CLOSEST);
                     id = t.image;
        break;
      case EUCLIDEAN:
        t = jj_consume_token(EUCLIDEAN);
                         id = t.image;
        break;
      case INTERPOLATE:
        t = jj_consume_token(INTERPOLATE);
                           id = t.image;
        break;
      case PREDICT:
        t = jj_consume_token(PREDICT);
                       id = t.image;
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LPAR);
      args = Exps();
      jj_consume_token(RPAR);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetValue( id + ":" + args );
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Methods() throws ParseException {
                 /*@bgen(jjtree) Methods */
  ASTMethods jjtn000 = new ASTMethods(JJTMETHODS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Method();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        Method();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public String Time() throws ParseException {
 /*@bgen(jjtree) Time */
    ASTTime jjtn000 = new ASTTime(JJTTIME);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    String number;
    try {
      number = Number();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NSEC:
        t = jj_consume_token(NSEC);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 {if (true) return number + ":" + t.image;}
        break;
      case USEC:
        t = jj_consume_token(USEC);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   {if (true) return number + ":" + t.image;}
        break;
      case MSEC:
        t = jj_consume_token(MSEC);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   {if (true) return number + ":" + t.image;}
        break;
      case SEC:
        t = jj_consume_token(SEC);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   {if (true) return number + ":" + t.image;}
        break;
      case MIN:
        t = jj_consume_token(MIN);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   {if (true) return number + ":" + t.image;}
        break;
      case HOUR:
        t = jj_consume_token(HOUR);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    {if (true) return number + ":" + t.image;}
        break;
      case DAY:
        t = jj_consume_token(DAY);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   {if (true) return number + ":" + t.image;}
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Exps() throws ParseException {
 /*@bgen(jjtree) Exps */
    ASTExps jjtn000 = new ASTExps(JJTEXPS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String exp, temp;
    try {
      exp = Exp();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        temp = Exp();
                                    exp += "," + temp;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return exp;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Exp() throws ParseException {
 /*@bgen(jjtree) Exp */
    ASTExp jjtn000 = new ASTExp(JJTEXP);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String func, exps, exp, exp2, value, temp;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SQRT:
      case SIN:
      case COS:
      case TAN:
      case ARCSIN:
      case ARCCOS:
      case ARCTAN:
      case ABS:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
        func = Func();
        jj_consume_token(LPAR);
        exps = Exps();
        jj_consume_token(RPAR);
        exp2 = Exp2();
                                                        jjtree.closeNodeScope(jjtn000, true);
                                                        jjtc000 = false;
                                                        {if (true) return func + "(" + exps + ")" + exp2;}
        break;
      case LPAR:
        jj_consume_token(LPAR);
        temp = Exp();
        jj_consume_token(RPAR);
        exp2 = Exp2();
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                           {if (true) return "(" + temp + ")" + exp2;}
        break;
      case INTEGER:
      case REAL:
      case VAR:
        value = Value();
        exp2 = Exp2();
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                      {if (true) return value + exp2;}
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Exp2() throws ParseException {
 /*@bgen(jjtree) Exp2 */
    ASTExp2 jjtn000 = new ASTExp2(JJTEXP2);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String func, exp, exp2;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SQRT:
      case SIN:
      case COS:
      case TAN:
      case ARCSIN:
      case ARCCOS:
      case ARCTAN:
      case ABS:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
        func = Func();
        exp = Exp();
        exp2 = Exp2();
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                              {if (true) return func + exp + exp2;}
        break;
      default:
        jj_la1[26] = jj_gen;

           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           {if (true) return "";}
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Func() throws ParseException {
 /*@bgen(jjtree) Func */
    ASTFunc jjtn000 = new ASTFunc(JJTFUNC);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 55:
        t = jj_consume_token(55);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              {if (true) return t.image;}
        break;
      case 56:
        t = jj_consume_token(56);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                {if (true) return t.image;}
        break;
      case 57:
        t = jj_consume_token(57);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                {if (true) return t.image;}
        break;
      case 58:
        t = jj_consume_token(58);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                {if (true) return t.image;}
        break;
      case 59:
        t = jj_consume_token(59);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                {if (true) return t.image;}
        break;
      case 60:
        t = jj_consume_token(60);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                {if (true) return t.image;}
        break;
      case 61:
        t = jj_consume_token(61);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 {if (true) return t.image;}
        break;
      case 62:
        t = jj_consume_token(62);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                {if (true) return t.image;}
        break;
      case 63:
        t = jj_consume_token(63);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 {if (true) return t.image;}
        break;
      case 64:
        t = jj_consume_token(64);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 {if (true) return t.image;}
        break;
      case SQRT:
        t = jj_consume_token(SQRT);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   {if (true) return t.image;}
        break;
      case SIN:
        t = jj_consume_token(SIN);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  {if (true) return t.image;}
        break;
      case COS:
        t = jj_consume_token(COS);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  {if (true) return t.image;}
        break;
      case TAN:
        t = jj_consume_token(TAN);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  {if (true) return t.image;}
        break;
      case ARCSIN:
        t = jj_consume_token(ARCSIN);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     {if (true) return t.image;}
        break;
      case ARCCOS:
        t = jj_consume_token(ARCCOS);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     {if (true) return t.image;}
        break;
      case ARCTAN:
        t = jj_consume_token(ARCTAN);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     {if (true) return t.image;}
        break;
      case ABS:
        t = jj_consume_token(ABS);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  {if (true) return t.image;}
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Number() throws ParseException {
 /*@bgen(jjtree) Number */
    ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    {if (true) return t.image;}
        break;
      case REAL:
        t = jj_consume_token(REAL);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   {if (true) return t.image;}
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Value() throws ParseException {
 /*@bgen(jjtree) Value */
    ASTValue jjtn000 = new ASTValue(JJTVALUE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    String number;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case REAL:
        number = Number();
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        {if (true) return number;}
        break;
      case VAR:
        t = jj_consume_token(VAR);
                  jjtn000.jjtSetValue( t.image );
                                                      jjtree.closeNodeScope(jjtn000, true);
                                                      jjtc000 = false;
                                                      {if (true) return t.image;}
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public PilotsParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x4000,0x0,0x0,0x8000,0x0,0x0,0x0,0x800000,0x0,0x1000000,0x0,0x0,0x780000,0x0,0xfc000000,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x40000,0x100000,0x40000,0x100000,0x40000,0x100000,0x0,0x40000,0x100000,0x0,0x40000,0x100000,0x0,0x100000,0x800,0x80000,0x0,0x4000,0x0,0x800,0x2000,0x0,0x2000,0x1,0x2000,0xff8549fe,0xff8001fe,0xff8001fe,0x14000,0x54000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public PilotsParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PilotsParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PilotsParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public PilotsParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PilotsParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public PilotsParser(PilotsParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PilotsParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[65];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 65; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
