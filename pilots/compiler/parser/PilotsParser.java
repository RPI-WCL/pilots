/* PilotsParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. PilotsParser.java */
package pilots.compiler.parser;
import java.io.*;

public class PilotsParser/*@bgen(jjtree)*/implements PilotsParserTreeConstants, PilotsParserConstants {/*@bgen(jjtree)*/
  protected JJTPilotsParserState jjtree = new JJTPilotsParserState();

/**************************************/
/********** START OF GRAMMAR **********/
/**************************************/
/* Non-terminals */
  final public ASTPilots Pilots() throws ParseException {/*@bgen(jjtree) Pilots */
    ASTPilots jjtn000 = new ASTPilots(JJTPILOTS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(PROGRAM_START);
      t = jj_consume_token(VAR);
jjtn000.jjtSetValue( t.image );
      jj_consume_token(58);
      jj_consume_token(INPUTS);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 58:{
        jj_consume_token(58);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case VAR:{
            ;
            break;
            }
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          Input();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONSTANTS:{
        jj_consume_token(CONSTANTS);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 58:{
          jj_consume_token(58);
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case VAR:{
              ;
              break;
              }
            default:
              jj_la1[2] = jj_gen;
              break label_2;
            }
            Constant();
          }
        }
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(OUTPUTS);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 58:{
        jj_consume_token(58);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case VAR:{
            ;
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            break label_3;
          }
          Output();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ERRORS:{
        jj_consume_token(ERRORS);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 58:{
          jj_consume_token(58);
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          label_4:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case VAR:{
              ;
              break;
              }
            default:
              jj_la1[7] = jj_gen;
              break label_4;
            }
            Error();
          }
        }
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SIGNATURES:{
        jj_consume_token(SIGNATURES);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 58:{
          jj_consume_token(58);
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case VAR:{
              ;
              break;
              }
            default:
              jj_la1[10] = jj_gen;
              break label_5;
            }
            Signature();
          }
        }
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MODES:{
        jj_consume_token(MODES);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 58:{
          jj_consume_token(58);
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          label_6:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case VAR:{
              ;
              break;
              }
            default:
              jj_la1[13] = jj_gen;
              break label_6;
            }
            Mode();
          }
        }
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CORRECTS:{
        jj_consume_token(CORRECTS);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 58:{
          jj_consume_token(58);
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          label_7:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case VAR:{
              ;
              break;
              }
            default:
              jj_la1[16] = jj_gen;
              break label_7;
            }
            Correct();
          }
        }
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      jj_consume_token(PROGRAM_END);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 58:{
        jj_consume_token(58);
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Input() throws ParseException {/*@bgen(jjtree) Input */
    ASTInput jjtn000 = new ASTInput(JJTINPUT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String str;
    try {
      str = Vars();
jjtn000.jjtSetValue(str);
      Dim();
      jj_consume_token(USING);
      Methods();
      jj_consume_token(58);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Constant() throws ParseException {/*@bgen(jjtree) Constant */
    ASTConstant jjtn000 = new ASTConstant(JJTCONSTANT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String str, exp;
    try {
      str = Vars();
      jj_consume_token(59);
      exp = Exp();
      jj_consume_token(58);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.jjtSetValue(str + ":" + exp);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Output() throws ParseException {/*@bgen(jjtree) Output */
    ASTOutput jjtn000 = new ASTOutput(JJTOUTPUT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    String str = null, exps = null, time;
    try {
      if (jj_2_1(2)) {
        t = jj_consume_token(VAR);
str = t.image;
        jj_consume_token(60);
        exps = Exp();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR:{
          str = Vars();
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(AT);
      jj_consume_token(EVERY);
      time = Time();
      jj_consume_token(58);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.jjtSetValue(str + ":" + exps + ":" + time);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Error() throws ParseException {/*@bgen(jjtree) Error */
    ASTError jjtn000 = new ASTError(JJTERROR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String str, exps;
    try {
      str = Vars();
      jj_consume_token(60);
      exps = Exps();
      jj_consume_token(58);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.jjtSetValue(str + ":" + exps);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Signature() throws ParseException {/*@bgen(jjtree) Signature */
    ASTSignature jjtn000 = new ASTSignature(JJTSIGNATURE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String constant = "", exps;
    Token t1, t2, t3 = null;
    try {
      t1 = jj_consume_token(VAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAR:{
        constant = ConstInSignature();
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      jj_consume_token(60);
      t2 = jj_consume_token(VAR);
      jj_consume_token(59);
      exps = Exps();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING:{
        t3 = jj_consume_token(STRING);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ESTIMATE:{
        Estimate();
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      jj_consume_token(58);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
if (t3 != null) {
            jjtn000.jjtSetValue(t1.image + ":" + constant + ":" + t2.image + ":" + exps + ":" + t3.image);
        } else {
            jjtn000.jjtSetValue(t1.image + ":" + constant + ":" + t2.image + ":" + exps);
        }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Mode() throws ParseException {/*@bgen(jjtree) Mode */
    ASTMode jjtn000 = new ASTMode(JJTMODE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String exps;
    Token t1, t2 = null;
    try {
      t1 = jj_consume_token(VAR);
      jj_consume_token(60);
      exps = Exps();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING:{
        t2 = jj_consume_token(STRING);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ESTIMATE:{
        Estimate();
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(58);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
if (t2 != null) {
            jjtn000.jjtSetValue(t1.image + ":" + exps + ":" + t2.image);
        } else {
            jjtn000.jjtSetValue(t1.image + ":" + exps);
        }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Estimate() throws ParseException {/*@bgen(jjtree) Estimate */
    ASTEstimate jjtn000 = new ASTEstimate(JJTESTIMATE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String exp = "";
    Token t1;
    Token t2 = new Token();
    Token t3 = new Token();
    try {
      jj_consume_token(ESTIMATE);
      t1 = jj_consume_token(VAR);
      jj_consume_token(59);
      exp = Exp();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHEN:{
        jj_consume_token(WHEN);
        t2 = jj_consume_token(VAR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER:{
          t3 = jj_consume_token(INTEGER);
          jj_consume_token(TIMES);
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.jjtSetValue(t1.image + ":" + t2.image + ":" + t3.image + ":" + exp);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Correct() throws ParseException {/*@bgen(jjtree) Correct */
    ASTCorrect jjtn000 = new ASTCorrect(JJTCORRECT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String constant = null, exp;
    Token t1, t2;
    try {
      t1 = jj_consume_token(VAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAR:{
        constant = ConstInSignature();
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      jj_consume_token(60);
      t2 = jj_consume_token(VAR);
      jj_consume_token(59);
      exp = Exp();
      jj_consume_token(58);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.jjtSetValue(t1.image + ":" + constant + ":" + t2.image + ":" + exp);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public String Vars() throws ParseException {/*@bgen(jjtree) Vars */
    ASTVars jjtn000 = new ASTVars(JJTVARS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    String str;
    try {
      t = jj_consume_token(VAR);
str = t.image;
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(VAR);
str += "," + t.image;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return str;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String ConstInSignature() throws ParseException {/*@bgen(jjtree) ConstInSignature */
    ASTConstInSignature jjtn000 = new ASTConstInSignature(JJTCONSTINSIGNATURE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    String str;
    try {
      jj_consume_token(LPAR);
      t = jj_consume_token(VAR);
str = t.image;
      jj_consume_token(RPAR);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return str;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Dim() throws ParseException {/*@bgen(jjtree) Dim */
  ASTDim jjtn000 = new ASTDim(JJTDIM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAR);
      Exps();
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Method() throws ParseException {/*@bgen(jjtree) Method */
    ASTMethod jjtn000 = new ASTMethod(JJTMETHOD);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    String id, args;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLOSEST:{
        t = jj_consume_token(CLOSEST);
id = t.image;
        break;
        }
      case EUCLIDEAN:{
        t = jj_consume_token(EUCLIDEAN);
id = t.image;
        break;
        }
      case INTERPOLATE:{
        t = jj_consume_token(INTERPOLATE);
id = t.image;
        break;
        }
      case PREDICT:{
        t = jj_consume_token(PREDICT);
id = t.image;
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LPAR);
      args = Exps();
      jj_consume_token(RPAR);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.jjtSetValue(id + ":" + args);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Methods() throws ParseException {/*@bgen(jjtree) Methods */
  ASTMethods jjtn000 = new ASTMethods(JJTMETHODS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Method();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[31] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA);
        Method();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public String Time() throws ParseException {/*@bgen(jjtree) Time */
    ASTTime jjtn000 = new ASTTime(JJTTIME);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    String number;
    try {
      number = Number();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NSEC:{
        t = jj_consume_token(NSEC);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
{if ("" != null) return number + ":" + t.image;}
        break;
        }
      case USEC:{
        t = jj_consume_token(USEC);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
{if ("" != null) return number + ":" + t.image;}
        break;
        }
      case MSEC:{
        t = jj_consume_token(MSEC);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
{if ("" != null) return number + ":" + t.image;}
        break;
        }
      case SEC:{
        t = jj_consume_token(SEC);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
{if ("" != null) return number + ":" + t.image;}
        break;
        }
      case MIN:{
        t = jj_consume_token(MIN);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
{if ("" != null) return number + ":" + t.image;}
        break;
        }
      case HOUR:{
        t = jj_consume_token(HOUR);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
{if ("" != null) return number + ":" + t.image;}
        break;
        }
      case DAY:{
        t = jj_consume_token(DAY);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
{if ("" != null) return number + ":" + t.image;}
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Exps() throws ParseException {/*@bgen(jjtree) Exps */
    ASTExps jjtn000 = new ASTExps(JJTEXPS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String exp, temp;
    try {
      exp = Exp();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        temp = Exp();
exp += "," + temp;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return exp;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Exp() throws ParseException {/*@bgen(jjtree) Exp */
    ASTExp jjtn000 = new ASTExp(JJTEXP);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String func, exps, exp, exp2, value, temp;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SQRT:
      case SIN:
      case COS:
      case TAN:
      case ARCSIN:
      case ARCCOS:
      case ARCTAN:
      case ABS:
      case AND:
      case OR:
      case XOR:
      case NOT:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:{
        func = Func();
        jj_consume_token(LPAR);
        exps = Exps();
        jj_consume_token(RPAR);
        exp2 = Exp2();
jjtree.closeNodeScope(jjtn000, true);
                                                        jjtc000 = false;
{if ("" != null) return func + "(" + exps + ")" + exp2;}
        break;
        }
      case LPAR:{
        jj_consume_token(LPAR);
        temp = Exp();
        jj_consume_token(RPAR);
        exp2 = Exp2();
jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
{if ("" != null) return "(" + temp + ")" + exp2;}
        break;
        }
      case INTEGER:
      case REAL:
      case VAR:{
        value = Value();
        exp2 = Exp2();
jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
{if ("" != null) return value + exp2;}
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Exp2() throws ParseException {/*@bgen(jjtree) Exp2 */
    ASTExp2 jjtn000 = new ASTExp2(JJTEXP2);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String func, exp, exp2;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SQRT:
      case SIN:
      case COS:
      case TAN:
      case ARCSIN:
      case ARCCOS:
      case ARCTAN:
      case ABS:
      case AND:
      case OR:
      case XOR:
      case NOT:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:{
        func = Func();
        exp = Exp();
        exp2 = Exp2();
jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
{if ("" != null) return func + exp + exp2;}
        break;
        }
      default:
        jj_la1[35] = jj_gen;

jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
{if ("" != null) return "";}
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Func() throws ParseException {/*@bgen(jjtree) Func */
    ASTFunc jjtn000 = new ASTFunc(JJTFUNC);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 61:{
        t = jj_consume_token(61);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 62:{
        t = jj_consume_token(62);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 63:{
        t = jj_consume_token(63);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 64:{
        t = jj_consume_token(64);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 65:{
        t = jj_consume_token(65);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 66:{
        t = jj_consume_token(66);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 67:{
        t = jj_consume_token(67);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 68:{
        t = jj_consume_token(68);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 69:{
        t = jj_consume_token(69);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 70:{
        t = jj_consume_token(70);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 71:{
        t = jj_consume_token(71);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case AND:{
        t = jj_consume_token(AND);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case OR:{
        t = jj_consume_token(OR);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case XOR:{
        t = jj_consume_token(XOR);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case NOT:{
        t = jj_consume_token(NOT);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case SQRT:{
        t = jj_consume_token(SQRT);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case SIN:{
        t = jj_consume_token(SIN);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case COS:{
        t = jj_consume_token(COS);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case TAN:{
        t = jj_consume_token(TAN);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case ARCSIN:{
        t = jj_consume_token(ARCSIN);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case ARCCOS:{
        t = jj_consume_token(ARCCOS);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case ARCTAN:{
        t = jj_consume_token(ARCTAN);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case ABS:{
        t = jj_consume_token(ABS);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Number() throws ParseException {/*@bgen(jjtree) Number */
    ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:{
        t = jj_consume_token(INTEGER);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case REAL:{
        t = jj_consume_token(REAL);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Value() throws ParseException {/*@bgen(jjtree) Value */
    ASTValue jjtn000 = new ASTValue(JJTVALUE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    String number;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:
      case REAL:{
        number = Number();
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
{if ("" != null) return number;}
        break;
        }
      case VAR:{
        t = jj_consume_token(VAR);
jjtn000.jjtSetValue(t.image);
jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(VAR)) return true;
    if (jj_scan_token(60)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public PilotsParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[39];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x8000,0x0,0x0,0x10000,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x2000000,0x0,0x2000000,0x0,0x4000000,0x0,0x0,0x1e00000,0x0,0xf0000000,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1000000,0x4000000,0x1000000,0x4000000,0x0,0x1000000,0x4000000,0x1000000,0x4000000,0x0,0x1000000,0x4000000,0x0,0x1000000,0x4000000,0x0,0x1000000,0x4000000,0x0,0x4000000,0x1000000,0x20000,0x2000000,0x0,0x2000000,0x0,0x100000,0x0,0x20000,0x80000,0x0,0x80000,0x7,0x80000,0xe1527ff8,0xe0007ff8,0xe0007ff8,0x500000,0x1500000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff,0xff,0xff,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PilotsParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PilotsParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PilotsParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PilotsParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PilotsParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PilotsParser(PilotsParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PilotsParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[72];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 39; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 72; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
