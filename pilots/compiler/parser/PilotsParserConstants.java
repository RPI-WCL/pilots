/* Generated By:JJTree&JavaCC: Do not edit this line. PilotsParserConstants.java */
package pilots.compiler.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PilotsParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PROGRAM_START = 10;
  /** RegularExpression Id. */
  int INPUTS = 11;
  /** RegularExpression Id. */
  int OUTPUTS = 12;
  /** RegularExpression Id. */
  int ERRORS = 13;
  /** RegularExpression Id. */
  int SIGNATURES = 14;
  /** RegularExpression Id. */
  int CORRECTS = 15;
  /** RegularExpression Id. */
  int USING = 16;
  /** RegularExpression Id. */
  int AT = 17;
  /** RegularExpression Id. */
  int EVERY = 18;
  /** RegularExpression Id. */
  int CLOSEST = 19;
  /** RegularExpression Id. */
  int EUCLIDEAN = 20;
  /** RegularExpression Id. */
  int INTERPOLATE = 21;
  /** RegularExpression Id. */
  int PREDICT = 22;
  /** RegularExpression Id. */
  int ESTIMATE = 23;
  /** RegularExpression Id. */
  int WHEN = 24;
  /** RegularExpression Id. */
  int TIMES = 25;
  /** RegularExpression Id. */
  int NSEC = 26;
  /** RegularExpression Id. */
  int USEC = 27;
  /** RegularExpression Id. */
  int MSEC = 28;
  /** RegularExpression Id. */
  int SEC = 29;
  /** RegularExpression Id. */
  int MIN = 30;
  /** RegularExpression Id. */
  int HOUR = 31;
  /** RegularExpression Id. */
  int DAY = 32;
  /** RegularExpression Id. */
  int SQRT = 33;
  /** RegularExpression Id. */
  int SIN = 34;
  /** RegularExpression Id. */
  int COS = 35;
  /** RegularExpression Id. */
  int TAN = 36;
  /** RegularExpression Id. */
  int ARCSIN = 37;
  /** RegularExpression Id. */
  int ARCCOS = 38;
  /** RegularExpression Id. */
  int ARCTAN = 39;
  /** RegularExpression Id. */
  int ABS = 40;
  /** RegularExpression Id. */
  int PROGRAM_END = 41;
  /** RegularExpression Id. */
  int DIGIT = 42;
  /** RegularExpression Id. */
  int LPAR = 43;
  /** RegularExpression Id. */
  int RPAR = 44;
  /** RegularExpression Id. */
  int COMMA = 45;
  /** RegularExpression Id. */
  int INTEGER = 46;
  /** RegularExpression Id. */
  int SCALEFACTOR = 47;
  /** RegularExpression Id. */
  int REAL = 48;
  /** RegularExpression Id. */
  int LETTER = 49;
  /** RegularExpression Id. */
  int VAR = 50;
  /** RegularExpression Id. */
  int STRING = 51;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "\"/*\"",
    "<token of kind 7>",
    "\"/*\"",
    "\"*/\"",
    "\"program\"",
    "\"inputs\"",
    "\"outputs\"",
    "\"errors\"",
    "\"signatures\"",
    "\"correct\"",
    "\"using\"",
    "\"at\"",
    "\"every\"",
    "\"closest\"",
    "\"euclidean\"",
    "\"interpolate\"",
    "\"predict\"",
    "\"estimate\"",
    "\"when\"",
    "\"times\"",
    "\"nsec\"",
    "\"usec\"",
    "\"msec\"",
    "\"sec\"",
    "\"min\"",
    "\"hour\"",
    "\"day\"",
    "\"sqrt\"",
    "\"sin\"",
    "\"cos\"",
    "\"tan\"",
    "\"asin\"",
    "\"acos\"",
    "\"atan\"",
    "\"abs\"",
    "\"end\"",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\",\"",
    "<INTEGER>",
    "<SCALEFACTOR>",
    "<REAL>",
    "<LETTER>",
    "<VAR>",
    "<STRING>",
    "\";\"",
    "\":\"",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"!=\"",
  };

}
