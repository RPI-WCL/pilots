options{
    MULTI=true;
    VISITOR=true;
    STATIC=false;
}

PARSER_BEGIN(PilotsParser)
package pilots.compiler.parser;
import java.io.*;

public class PilotsParser {

}
PARSER_END(PilotsParser)

/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/
/* Terminals */

TOKEN_MGR_DECLS :
{
  static int commentNesting;  // Current level of nesting of comments
}


/*** Skip whitespace and comments ***/
SKIP : {
" "
| "\t"
| "\n"
| "\r"
| "\r\n"
| "/*"  { commentNesting=1; } : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
  < "/*" > { commentNesting++; } 
| < "*/" > { commentNesting--; if (commentNesting==0) SwitchTo(DEFAULT); }
}


/*** The keywords ***/
TOKEN : /* RESERVED TOKENS */
{
<PROGRAM_START : "program">
| <INPUTS: "inputs">
| <CONSTANTS: "constants">
| <OUTPUTS: "outputs">
| <ERRORS: "errors">
| <SIGNATURES: "signatures">
| <MODES: "modes">        
| <CORRECTS: "correct">
| <USING: "using">
| <AT: "at">
| <EVERY: "every">
| <CLOSEST: "closest">
| <EUCLIDEAN: "euclidean">
| <INTERPOLATE: "interpolate">
| <MODEL: "model">
| <ESTIMATE: "estimate">
| <WHEN: "when">
| <TIMES: "times">
| <NSEC: "nsec">
| <USEC: "usec">
| <MSEC: "msec">
| <SEC: "sec">
| <MIN: "min">
| <HOUR: "hour">
| <DAY: "day">
| <SQRT: "sqrt">
| <SIN: "sin">
| <COS: "cos">
| <TAN: "tan">
| <ARCSIN: "asin">
| <ARCCOS: "acos">
| <ARCTAN: "atan">
| <ABS: "abs">
| <AND: "and">
| <OR: "or">
| <XOR: "xor">
| <NOT: "not">         
| <PROGRAM_END: "end">
}

TOKEN : /* Normal Tokens */
{
<#DIGIT : ["0"-"9"]>
| <LPAR: "(">
| <RPAR: ")">
| <COMMA: ",">
| <INTEGER : ("+" | "-")? (<DIGIT>)+>
| <#SCALEFACTOR : ("E" | "e") ("+" | "-")? (<DIGIT>)+>
| <REAL : ("+" | "-")? (<DIGIT>)+ "." (<DIGIT>)* (<SCALEFACTOR>)?>
| <#LETTER : ["A"-"Z","a"-"z","_","."]>
| <VAR : <LETTER> (<LETTER> | <DIGIT>)*>
| <STRING : "\"" (~["\""])* "\"" >
}


/**************************************/
/********** START OF GRAMMAR **********/
/**************************************/
/* Non-terminals */
ASTPilots Pilots(): 
{
    Token t;
}
{
    <PROGRAM_START> t = <VAR> { jjtThis.jjtSetValue( t.image ); } ";"
        <INPUTS> (";" | (Input())*)
        (<CONSTANTS> (";" | (Constant())*))?                                                                      
        <OUTPUTS> (";" | (Output())*)
        (<ERRORS> (";" | (Error())*))?
        (<SIGNATURES> (";" | (Signature())*))?
        (<MODES> (";" | (Mode())*))?                                                                      
        (<CORRECTS> (";" | (Correct())*))?
    <PROGRAM_END> (";")?
    { return jjtThis; }
}

void Input(): 
{
    String str;
}
{
    str = Vars() 
    { jjtThis.jjtSetValue(str); }
    Dim() <USING> Methods() ";"
}

void Constant():
{
    String str, exp;
}
{
    str = Vars() "=" exp = Exp() ";"
    { jjtThis.jjtSetValue(str + ":" + exp); }
}

void Output(): 
{
    Token t;
    String str = null, exps = null, time;
}
{
    (LOOKAHEAD(2) t = <VAR> { str = t.image; } ":" exps = Exp() | 
     str = Vars())
        <AT> <EVERY> time = Time() ";"
    { jjtThis.jjtSetValue(str + ":" + exps + ":" + time); }
}

void Error():
{
    String str, exps;
}
{
    str = Vars() ":" exps = Exps() ";"
    { jjtThis.jjtSetValue(str + ":" + exps); }
}

void Signature():
{
    String constant = "", exps;
    Token t1, t2, t3 = null;
}
{
    t1 = <VAR> (constant = ConstInSignature())? ":" t2 = <VAR> "=" exps = Exps() (t3 = <STRING>)? (Estimate())* ";"
    { 
        if (t3 != null) {
            jjtThis.jjtSetValue(t1.image + ":" + constant + ":" + t2.image + ":" + exps + ":" + t3.image);
        } else {
            jjtThis.jjtSetValue(t1.image + ":" + constant + ":" + t2.image + ":" + exps);
        }
    }
}

void Mode():
{
    String exps;
    Token t1, t2 = null;
}
{
    t1 = <VAR> ":" exps = Exps() (t2 = <STRING>)? (Estimate())* ";"
    { 
        if (t2 != null) {
            jjtThis.jjtSetValue(t1.image + ":" + exps + ":" + t2.image);
        } else {
            jjtThis.jjtSetValue(t1.image + ":" + exps);
        }
    }
}

void Estimate():
{
    String exp = "";
    Token t1;
    Token t2 = new Token();
    Token t3 = new Token();
}
{
    <ESTIMATE> t1 = <VAR> "=" exp = Exp() (<WHEN> t2 = <VAR> (t3 = <INTEGER> <TIMES>)?)?
    { jjtThis.jjtSetValue(t1.image + ":" + t2.image + ":" + t3.image + ":" + exp); }
}

void Correct():
{
    String constant = null, exp;
    Token t1, t2;
}
{
    t1 = <VAR> (constant = ConstInSignature())? ":" t2 = <VAR> "=" exp = Exp() ";"
    { jjtThis.jjtSetValue(t1.image + ":" + constant + ":" + t2.image + ":" + exp); }
}


String Vars(): 
{
    Token t;
    String str;
}
{
    t = <VAR> { str = t.image; }
    ("," t = <VAR> { str += "," + t.image; })* 
    { return str; }
}

String ConstInSignature():
{
    Token t;
    String str;
}
{
    "(" t = <VAR> { str = t.image; } ")"
    { return str; }                                     
}

void Dim(): {}
{
    // "(t)" | "(x,t)" | "(x,y,t)" | "(x,y,z,t)"
    // "(" ["x," ["y,"["z,"]]] "t" ")"
    // "(" ["x," ["y,"["z,"]]] <VAR> ")"
    "(" Exps() ")"      // workaround to avoid conflicts with the arguments for Method()
}

void Method(): 
{
    Token t;
    String id, args;
}
{
    
    (t = <CLOSEST> { id = t.image; } 
     | t = <EUCLIDEAN> { id = t.image; } 
     | t = <INTERPOLATE> { id = t.image; }
     | t = <MODEL> { id = t.image; } )
    "(" args = Exps() ")"
    { jjtThis.jjtSetValue(id + ":" + args); } 
}

void Methods(): {}
{
    Method() ("," Method())*
}

String Time(): 
{
    Token t;
    String number;
}
{
    number = Number() (
    t = <NSEC> { return number + ":" + t.image; }
    | t = <USEC> { return number + ":" + t.image; }
    | t = <MSEC> { return number + ":" + t.image; }
    | t = <SEC>  { return number + ":" + t.image; }
    | t = <MIN>  { return number + ":" + t.image; }
    | t = <HOUR>  { return number + ":" + t.image; }
    | t = <DAY>  { return number + ":" + t.image; }
    )
}

String Exps(): 
{
    String exp, temp;
}
{
    exp = Exp() ("," temp = Exp() { exp += "," + temp; } )*
    { return exp; }
}

String Exp(): 
{
    String func, exps, exp, exp2, value, temp;
}
{
    func = Func() "(" exps = Exps() ")" exp2 = Exp2() { return func + "(" + exps + ")" + exp2; } 
    | "(" temp = Exp() ")" exp2 = Exp2() { return "(" + temp + ")" + exp2; } 
    | value = Value() exp2 = Exp2() { return value + exp2; }
}

String Exp2(): 
{
    String func, exp, exp2;
}
{
    func = Func() exp = Exp() exp2 = Exp2() { return func + exp + exp2; } 
    | {} { return ""; }
}

String Func(): 
{
    Token t;
}
{
    t = "+" { return t.image; }
    | t = "-" { return t.image; }
    | t = "*" { return t.image; }
    | t = "/" { return t.image; }
    | t = "^" { return t.image; }
    | t = ">" { return t.image; }
    | t = ">=" { return t.image; }
    | t = "<" { return t.image; }
    | t = "<=" { return t.image; }
    | t = "!=" { return t.image; }
    | t = "==" { return t.image; }
    | t = <AND> { return t.image; }
    | t = <OR> { return t.image; }
    | t = <XOR> { return t.image; }
    | t = <NOT> { return t.image; }       
    | t = <SQRT> { return t.image; }
    | t = <SIN> { return t.image; }
    | t = <COS> { return t.image; }
    | t = <TAN> { return t.image; }
    | t = <ARCSIN> { return t.image; }
    | t = <ARCCOS> { return t.image; }
    | t = <ARCTAN> { return t.image; }
    | t = <ABS> { return t.image; }
}

String Number(): 
{
    Token t;
}
{
    t = <INTEGER> { return t.image; }
    | t = <REAL> { return t.image; }
}

String Value(): 
{
    Token t;
    String number;
}
{
    number = Number() { return number; }
    | t = <VAR> { jjtThis.jjtSetValue(t.image); } { return t.image; }
}
