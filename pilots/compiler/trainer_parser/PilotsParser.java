/* PilotsParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. PilotsParser.java */
package pilots.compiler.trainer_parser;
import java.io.*;

public class PilotsParser/*@bgen(jjtree)*/implements PilotsParserTreeConstants, PilotsParserConstants {/*@bgen(jjtree)*/
  protected JJTPilotsParserState jjtree = new JJTPilotsParserState();public static void main(String[] args) throws Exception{
      SimpleNode p = PilotsParser.parseFile(args[0]);
      p.dump("  ");
    }

    public static SimpleNode parseFile(String filePath) throws Exception{
      FileReader reader = new java.io.FileReader(new File(filePath));
      BufferedReader buffer = new BufferedReader(reader);
      PilotsParser parser = new PilotsParser(buffer);
      SimpleNode node = parser.Program();
      buffer.close();
      reader.close();
      return node;
    }

/**
Parser rules
**/

/* Non-terminals for pilots trainer */
  final public SimpleNode Program() throws ParseException {/*@bgen(jjtree) PROGRAM */
  ASTPROGRAM jjtn000 = new ASTPROGRAM(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TRAINER);
      Var();
      jj_consume_token(SEMICOL);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONSTANTS:{
        Constants();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      Data();
      Model();
      jj_consume_token(END);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOL:{
        jj_consume_token(SEMICOL);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Constants() throws ParseException {/*@bgen(jjtree) CONSTANTS */
  ASTCONSTANTS jjtn000 = new ASTCONSTANTS(JJTCONSTANTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CONSTANTS);
      label_1:
      while (true) {
        Equation();
        jj_consume_token(SEMICOL);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Data() throws ParseException {/*@bgen(jjtree) Data */
  ASTData jjtn000 = new ASTData(JJTDATA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DATA);
      label_2:
      while (true) {
        DataItem();
        jj_consume_token(SEMICOL);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SCHEMA:{
        Schema();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DataItem() throws ParseException {/*@bgen(jjtree) DataItem */
  ASTDataItem jjtn000 = new ASTDataItem(JJTDATAITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Vars();
      jj_consume_token(USING);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FILE:{
        File();
        break;
        }
      case MODEL:{
        ModelUser();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void File() throws ParseException {/*@bgen(jjtree) File */
  ASTFile jjtn000 = new ASTFile(JJTFILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FILE);
      jj_consume_token(LPAR);
      String();
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ModelUser() throws ParseException {/*@bgen(jjtree) ModelUser */
  ASTModelUser jjtn000 = new ASTModelUser(JJTMODELUSER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MODEL);
      jj_consume_token(LPAR);
      Vars();
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void String() throws ParseException {/*@bgen(jjtree) String */
  ASTString jjtn000 = new ASTString(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRING);
jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Model() throws ParseException {/*@bgen(jjtree) Model */
  ASTModel jjtn000 = new ASTModel(JJTMODEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MODEL);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PREPROCESS:{
        Preprocess();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      Features();
      Labels();
      Algorithm();
      Training();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Schema() throws ParseException {/*@bgen(jjtree) Schema */
  ASTSchema jjtn000 = new ASTSchema(JJTSCHEMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SCHEMA);
      jj_consume_token(UNIT);
      jj_consume_token(LPAR);
      Map();
      jj_consume_token(RPAR);
      jj_consume_token(SEMICOL);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Preprocess() throws ParseException {/*@bgen(jjtree) Preprocess */
  ASTPreprocess jjtn000 = new ASTPreprocess(JJTPREPROCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PREPROCESS);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CHANGEUNIT:{
        jj_consume_token(CHANGEUNIT);
        jj_consume_token(USING);
        jj_consume_token(UNIT);
        jj_consume_token(LPAR);
        Map();
        jj_consume_token(RPAR);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOL);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Features() throws ParseException {/*@bgen(jjtree) Features */
  ASTFeatures jjtn000 = new ASTFeatures(JJTFEATURES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FEATURES);
      jj_consume_token(COL);
      Exps();
      jj_consume_token(SEMICOL);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Labels() throws ParseException {/*@bgen(jjtree) Labels */
  ASTLabels jjtn000 = new ASTLabels(JJTLABELS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LABELS);
      jj_consume_token(COL);
      Exps();
      jj_consume_token(SEMICOL);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Algorithm() throws ParseException {/*@bgen(jjtree) Algorithm */
  ASTAlgorithm jjtn000 = new ASTAlgorithm(JJTALGORITHM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ALGORITHM);
      jj_consume_token(COL);
      Predicate();
      jj_consume_token(SEMICOL);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Training() throws ParseException {/*@bgen(jjtree) Training */
  ASTTraining jjtn000 = new ASTTraining(JJTTRAINING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(TRAINING);
      jj_consume_token(COL);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OFFLINE:{
        t = jj_consume_token(OFFLINE);
jjtn000.jjtSetValue(t.image);
        break;
        }
      case ONLINE:{
        t = jj_consume_token(ONLINE);
jjtn000.jjtSetValue(t.image);
        break;
        }
      case BOTH:{
        t = jj_consume_token(BOTH);
jjtn000.jjtSetValue(t.image);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOL);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Map() throws ParseException {/*@bgen(jjtree) Map */
  ASTMap jjtn000 = new ASTMap(JJTMAP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MapItem();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        MapItem();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MapItem() throws ParseException {/*@bgen(jjtree) MapItem */
  ASTMapItem jjtn000 = new ASTMapItem(JJTMAPITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Var();
      jj_consume_token(COL);
      Var();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Predicate() throws ParseException {/*@bgen(jjtree) Predicate */
  ASTPredicate jjtn000 = new ASTPredicate(JJTPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Var();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case USING:{
        jj_consume_token(USING);
        FuncExp();
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FuncExp() throws ParseException {/*@bgen(jjtree) FuncExp */
  ASTFuncExp jjtn000 = new ASTFuncExp(JJTFUNCEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Var();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAR:{
        jj_consume_token(LPAR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          NumMap();
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        jj_consume_token(RPAR);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NumMap() throws ParseException {/*@bgen(jjtree) NumMap */
  ASTNumMap jjtn000 = new ASTNumMap(JJTNUMMAP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      NumMapItem();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        NumMapItem();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NumMapItem() throws ParseException {/*@bgen(jjtree) NumMapItem */
  ASTNumMapItem jjtn000 = new ASTNumMapItem(JJTNUMMAPITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Var();
      jj_consume_token(COL);
      Number();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Non-terminals for normal mathematical expression */
  final public void Equation() throws ParseException {/*@bgen(jjtree) EQUATION */
  ASTEQUATION jjtn000 = new ASTEQUATION(JJTEQUATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String exps; /* TODO: using string here is a hack */

    try {
      Var();
      jj_consume_token(EQUAL);
      exps = Exp();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(exps);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Vars() throws ParseException {/*@bgen(jjtree) VARS */
  ASTVARS jjtn000 = new ASTVARS(JJTVARS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Var();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        Var();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Var() throws ParseException {/*@bgen(jjtree) VAR */
  ASTVAR jjtn000 = new ASTVAR(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
jjtn000.value = t.image;
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public String Exps() throws ParseException {/*@bgen(jjtree) Exps */
    ASTExps jjtn000 = new ASTExps(JJTEXPS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String exp, temp;
    try {
      exp = Exp();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        temp = Exp();
exp += "," + temp;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return exp;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Exp() throws ParseException {/*@bgen(jjtree) Exp */
    ASTExp jjtn000 = new ASTExp(JJTEXP);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String func, exps, exp, exp2, value, temp;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SQRT:
      case SIN:
      case COS:
      case TAN:
      case ARCSIN:
      case ARCCOS:
      case ARCTAN:
      case ABS:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:{
        func = Func();
        jj_consume_token(LPAR);
        exps = Exps();
        jj_consume_token(RPAR);
        exp2 = Exp2();
jjtree.closeNodeScope(jjtn000, true);
                                                        jjtc000 = false;
{if ("" != null) return func + "(" + exps + ")" + exp2;}
        break;
        }
      case LPAR:{
        jj_consume_token(LPAR);
        temp = Exp();
        jj_consume_token(RPAR);
        exp2 = Exp2();
jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
{if ("" != null) return "(" + temp + ")" + exp2;}
        break;
        }
      case INTEGER:
      case REAL:
      case ID:{
        value = Value();
        exp2 = Exp2();
jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
{if ("" != null) return value + exp2;}
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Exp2() throws ParseException {/*@bgen(jjtree) Exp2 */
    ASTExp2 jjtn000 = new ASTExp2(JJTEXP2);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String func, exp, exp2;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SQRT:
      case SIN:
      case COS:
      case TAN:
      case ARCSIN:
      case ARCCOS:
      case ARCTAN:
      case ABS:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:{
        func = Func();
        exp = Exp();
        exp2 = Exp2();
jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
{if ("" != null) return func + exp + exp2;}
        break;
        }
      default:
        jj_la1[17] = jj_gen;

jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
{if ("" != null) return "";}
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Func() throws ParseException {/*@bgen(jjtree) Func */
    ASTFunc jjtn000 = new ASTFunc(JJTFUNC);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 50:{
        t = jj_consume_token(50);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 51:{
        t = jj_consume_token(51);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 52:{
        t = jj_consume_token(52);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 53:{
        t = jj_consume_token(53);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 54:{
        t = jj_consume_token(54);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 55:{
        t = jj_consume_token(55);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 56:{
        t = jj_consume_token(56);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 57:{
        t = jj_consume_token(57);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 58:{
        t = jj_consume_token(58);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 59:{
        t = jj_consume_token(59);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case SQRT:{
        t = jj_consume_token(SQRT);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case SIN:{
        t = jj_consume_token(SIN);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case COS:{
        t = jj_consume_token(COS);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case TAN:{
        t = jj_consume_token(TAN);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case ARCSIN:{
        t = jj_consume_token(ARCSIN);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case ARCCOS:{
        t = jj_consume_token(ARCCOS);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case ARCTAN:{
        t = jj_consume_token(ARCTAN);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case ABS:{
        t = jj_consume_token(ABS);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Number() throws ParseException {/*@bgen(jjtree) Number */
    ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:{
        t = jj_consume_token(INTEGER);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case REAL:{
        t = jj_consume_token(REAL);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Value() throws ParseException {/*@bgen(jjtree) Value */
    ASTValue jjtn000 = new ASTValue(JJTVALUE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    String number;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:
      case REAL:{
        number = Number();
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
{if ("" != null) return number;}
        break;
        }
      case ID:{
        t = jj_consume_token(ID);
jjtn000.jjtSetValue( t.image );
jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public PilotsParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000,0x400,0x0,0x0,0x400000,0x300000,0x1000000,0x2000000,0xc0000000,0x800,0x8000,0x0,0x1000,0x800,0x800,0x800,0x1000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x10000,0x10000,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0xffdc3fc,0xffc03fc,0xffc03fc,0xc000,0x1c000,};
   }

  /** Constructor with InputStream. */
  public PilotsParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PilotsParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PilotsParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public PilotsParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PilotsParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public PilotsParser(PilotsParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PilotsParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[60];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
