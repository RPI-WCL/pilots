/* Generated By:JJTree&JavaCC: Do not edit this line. PilotsParserConstants.java */
package pilots.compiler.trainer_parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PilotsParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SEMICOL = 10;
  /** RegularExpression Id. */
  int COMMA = 11;
  /** RegularExpression Id. */
  int LPAR = 12;
  /** RegularExpression Id. */
  int RPAR = 13;
  /** RegularExpression Id. */
  int COL = 14;
  /** RegularExpression Id. */
  int USING = 15;
  /** RegularExpression Id. */
  int TRAINER = 16;
  /** RegularExpression Id. */
  int END = 17;
  /** RegularExpression Id. */
  int CONSTANTS = 18;
  /** RegularExpression Id. */
  int DATA = 19;
  /** RegularExpression Id. */
  int MODEL = 20;
  /** RegularExpression Id. */
  int FILE = 21;
  /** RegularExpression Id. */
  int SCHEMA = 22;
  /** RegularExpression Id. */
  int UNIT = 23;
  /** RegularExpression Id. */
  int PREPROCESS = 24;
  /** RegularExpression Id. */
  int CHANGEUNIT = 25;
  /** RegularExpression Id. */
  int FEATURES = 26;
  /** RegularExpression Id. */
  int LABELS = 27;
  /** RegularExpression Id. */
  int ALGORITHM = 28;
  /** RegularExpression Id. */
  int TRAINING = 29;
  /** RegularExpression Id. */
  int OFFLINE = 30;
  /** RegularExpression Id. */
  int ONLINE = 31;
  /** RegularExpression Id. */
  int BOTH = 32;
  /** RegularExpression Id. */
  int EQUAL = 33;
  /** RegularExpression Id. */
  int SQRT = 34;
  /** RegularExpression Id. */
  int SIN = 35;
  /** RegularExpression Id. */
  int COS = 36;
  /** RegularExpression Id. */
  int TAN = 37;
  /** RegularExpression Id. */
  int ARCSIN = 38;
  /** RegularExpression Id. */
  int ARCCOS = 39;
  /** RegularExpression Id. */
  int ARCTAN = 40;
  /** RegularExpression Id. */
  int ABS = 41;
  /** RegularExpression Id. */
  int DIGIT = 42;
  /** RegularExpression Id. */
  int LETTER = 43;
  /** RegularExpression Id. */
  int ALPHANUM = 44;
  /** RegularExpression Id. */
  int SCALEFACTOR = 45;
  /** RegularExpression Id. */
  int INTEGER = 46;
  /** RegularExpression Id. */
  int REAL = 47;
  /** RegularExpression Id. */
  int ID = 48;
  /** RegularExpression Id. */
  int STRING = 49;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "\"/*\"",
    "<token of kind 7>",
    "\"/*\"",
    "\"*/\"",
    "\";\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\":\"",
    "\"using\"",
    "\"trainer\"",
    "\"end\"",
    "\"constants\"",
    "\"data\"",
    "\"model\"",
    "\"file\"",
    "\"schema\"",
    "\"unit\"",
    "\"preprocess\"",
    "\"changeunit\"",
    "\"features\"",
    "\"labels\"",
    "\"algorithm\"",
    "\"training\"",
    "\"offline\"",
    "\"online\"",
    "\"both\"",
    "\"=\"",
    "\"sqrt\"",
    "\"sin\"",
    "\"cos\"",
    "\"tan\"",
    "\"asin\"",
    "\"acos\"",
    "\"atan\"",
    "\"abs\"",
    "<DIGIT>",
    "<LETTER>",
    "<ALPHANUM>",
    "<SCALEFACTOR>",
    "<INTEGER>",
    "<REAL>",
    "<ID>",
    "<STRING>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"!=\"",
  };

}
