/* TrainerParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. TrainerParser.java */
package pilots.compiler.trainer.parser;

public class TrainerParser/*@bgen(jjtree)*/implements TrainerParserTreeConstants, TrainerParserConstants {/*@bgen(jjtree)*/
  protected JJTTrainerParserState jjtree = new JJTTrainerParserState();

/**************************************/
/********** START OF GRAMMAR **********/
/**************************************/
/* Non-terminals */
  final public ASTTrainer Trainer() throws ParseException {/*@bgen(jjtree) Trainer */
    ASTTrainer jjtn000 = new ASTTrainer(JJTTRAINER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(PROGRAM_START);
      t = jj_consume_token(VAR);
jjtn000.jjtSetValue( t.image );
      jj_consume_token(43);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONSTANTS:{
        jj_consume_token(CONSTANTS);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 43:{
          jj_consume_token(43);
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          label_1:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case VAR:{
              ;
              break;
              }
            default:
              jj_la1[0] = jj_gen;
              break label_1;
            }
            Constant();
          }
        }
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(DATA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 43:{
        jj_consume_token(43);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case VAR:{
            ;
            break;
            }
          default:
            jj_la1[3] = jj_gen;
            break label_2;
          }
          Data();
        }
      }
      jj_consume_token(MODEL);
      jj_consume_token(FEATURES);
      jj_consume_token(44);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 43:{
        jj_consume_token(43);
        break;
        }
      case SQRT:
      case SIN:
      case COS:
      case TAN:
      case ARCSIN:
      case ARCCOS:
      case ARCTAN:
      case ABS:
      case AND:
      case OR:
      case XOR:
      case NOT:
      case LPAR:
      case INTEGER:
      case REAL:
      case VAR:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:{
        Feature();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(43);
      jj_consume_token(LABELS);
      jj_consume_token(44);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 43:{
        jj_consume_token(43);
        break;
        }
      case SQRT:
      case SIN:
      case COS:
      case TAN:
      case ARCSIN:
      case ARCCOS:
      case ARCTAN:
      case ABS:
      case AND:
      case OR:
      case XOR:
      case NOT:
      case LPAR:
      case INTEGER:
      case REAL:
      case VAR:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:{
        Label();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(43);
      jj_consume_token(ALGORITHM);
      jj_consume_token(44);
      Algorithm();
      jj_consume_token(43);
      jj_consume_token(PROGRAM_END);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 43:{
        jj_consume_token(43);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final public void Constant() throws ParseException {/*@bgen(jjtree) Constant */
    ASTConstant jjtn000 = new ASTConstant(JJTCONSTANT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String str, exp;
    try {
      str = Vars();
      jj_consume_token(45);
      exp = Exp();
      jj_consume_token(43);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.jjtSetValue( str + ":" + exp);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void Data() throws ParseException {/*@bgen(jjtree) Data */
    ASTData jjtn000 = new ASTData(JJTDATA);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String str, str2;
    try {
      str = Vars();
jjtn000.jjtSetValue(str);
      jj_consume_token(USING);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FILE:{
        str2 = File();
        break;
        }
      case MODEL:{
        str2 = ModelUser();
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(43);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.jjtSetValue( str2 + ":" + str );
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public String File() throws ParseException {/*@bgen(jjtree) File */
    ASTFile jjtn000 = new ASTFile(JJTFILE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token f;
    try {
      jj_consume_token(FILE);
      jj_consume_token(LPAR);
      f = jj_consume_token(STRING);
      jj_consume_token(RPAR);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return "file:" + f.image;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final public String ModelUser() throws ParseException {/*@bgen(jjtree) ModelUser */
    ASTModelUser jjtn000 = new ASTModelUser(JJTMODELUSER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String vars;
    try {
      jj_consume_token(MODEL);
      jj_consume_token(LPAR);
      vars = Vars();
      jj_consume_token(RPAR);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return "model:" + vars;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final public void Feature() throws ParseException {/*@bgen(jjtree) Feature */
    ASTFeature jjtn000 = new ASTFeature(JJTFEATURE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String s;
    try {
      s = Exps();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.jjtSetValue( s );
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void Label() throws ParseException {/*@bgen(jjtree) Label */
    ASTLabel jjtn000 = new ASTLabel(JJTLABEL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String s;
    try {
      s = Exps();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.jjtSetValue( s );
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void Algorithm() throws ParseException {/*@bgen(jjtree) Algorithm */
    ASTAlgorithm jjtn000 = new ASTAlgorithm(JJTALGORITHM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(VAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAR:{
        jj_consume_token(LPAR);
        Map();
        jj_consume_token(RPAR);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.jjtSetValue( t.image );
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void Map() throws ParseException {/*@bgen(jjtree) Map */
  ASTMap jjtn000 = new ASTMap(JJTMAP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MapItem();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        MapItem();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void MapItem() throws ParseException {/*@bgen(jjtree) MapItem */
    ASTMapItem jjtn000 = new ASTMapItem(JJTMAPITEM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t1, t2 = null;
    String str = null;
    try {
      t1 = jj_consume_token(VAR);
      jj_consume_token(44);
      if (jj_2_1(2)) {
        str = Number();
      } else if (jj_2_2(2)) {
        t2 = jj_consume_token(VAR);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SQRT:
        case SIN:
        case COS:
        case TAN:
        case ARCSIN:
        case ARCCOS:
        case ARCTAN:
        case ABS:
        case AND:
        case OR:
        case XOR:
        case NOT:
        case LPAR:
        case INTEGER:
        case REAL:
        case VAR:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:{
          str = Exp();
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
if ( t2 != null ) {
            jjtn000.jjtSetValue( t1.image + ":" + t2.image );
        } else {
            jjtn000.jjtSetValue( t1.image + ":" + str );
        }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public String Vars() throws ParseException {/*@bgen(jjtree) Vars */
    ASTVars jjtn000 = new ASTVars(JJTVARS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    String str;
    try {
      t = jj_consume_token(VAR);
str = t.image;
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(VAR);
str += "," + t.image;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return str;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final public String Exps() throws ParseException {/*@bgen(jjtree) Exps */
    ASTExps jjtn000 = new ASTExps(JJTEXPS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String exp, temp;
    try {
      exp = Exp();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        temp = Exp();
exp += ";" + temp;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return exp;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final public String Exps2() throws ParseException {/*@bgen(jjtree) Exps2 */
    ASTExps2 jjtn000 = new ASTExps2(JJTEXPS2);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String exp, temp;
    try {
      exp = Exp();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        temp = Exp();
exp += "," + temp;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return exp;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final public String Exp() throws ParseException {/*@bgen(jjtree) Exp */
    ASTExp jjtn000 = new ASTExp(JJTEXP);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String func, exps, exp2, value, temp;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SQRT:
      case SIN:
      case COS:
      case TAN:
      case ARCSIN:
      case ARCCOS:
      case ARCTAN:
      case ABS:
      case AND:
      case OR:
      case XOR:
      case NOT:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:{
        func = Func();
        jj_consume_token(LPAR);
        exps = Exps2();
        jj_consume_token(RPAR);
        exp2 = Exp2();
jjtree.closeNodeScope(jjtn000, true);
                                                         jjtc000 = false;
{if ("" != null) return "|" + func + "|(" + exps + ")" + exp2;}
        break;
        }
      case LPAR:{
        jj_consume_token(LPAR);
        temp = Exp();
        jj_consume_token(RPAR);
        exp2 = Exp2();
jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
{if ("" != null) return "(" + temp + ")" + exp2;}
        break;
        }
      case INTEGER:
      case REAL:
      case VAR:{
        value = Value();
        exp2 = Exp2();
jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
{if ("" != null) return "[" + value + "]" + exp2;}
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final public String Exp2() throws ParseException {/*@bgen(jjtree) Exp2 */
    ASTExp2 jjtn000 = new ASTExp2(JJTEXP2);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String func, exp, exp2;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SQRT:
      case SIN:
      case COS:
      case TAN:
      case ARCSIN:
      case ARCCOS:
      case ARCTAN:
      case ABS:
      case AND:
      case OR:
      case XOR:
      case NOT:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:{
        func = Func();
        exp = Exp();
        exp2 = Exp2();
jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
{if ("" != null) return "{" + func + "}(" + exp + exp2 + ")";}
        break;
        }
      default:
        jj_la1[16] = jj_gen;

jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
{if ("" != null) return "";}
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final public String Func() throws ParseException {/*@bgen(jjtree) Func */
    ASTFunc jjtn000 = new ASTFunc(JJTFUNC);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 46:{
        t = jj_consume_token(46);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 47:{
        t = jj_consume_token(47);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 48:{
        t = jj_consume_token(48);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 49:{
        t = jj_consume_token(49);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 50:{
        t = jj_consume_token(50);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 51:{
        t = jj_consume_token(51);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 52:{
        t = jj_consume_token(52);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 53:{
        t = jj_consume_token(53);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 54:{
        t = jj_consume_token(54);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 55:{
        t = jj_consume_token(55);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case 56:{
        t = jj_consume_token(56);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case AND:{
        t = jj_consume_token(AND);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case OR:{
        t = jj_consume_token(OR);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case XOR:{
        t = jj_consume_token(XOR);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case NOT:{
        t = jj_consume_token(NOT);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case SQRT:{
        t = jj_consume_token(SQRT);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case SIN:{
        t = jj_consume_token(SIN);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case COS:{
        t = jj_consume_token(COS);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case TAN:{
        t = jj_consume_token(TAN);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case ARCSIN:{
        t = jj_consume_token(ARCSIN);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case ARCCOS:{
        t = jj_consume_token(ARCCOS);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case ARCTAN:{
        t = jj_consume_token(ARCTAN);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case ABS:{
        t = jj_consume_token(ABS);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final public String Number() throws ParseException {/*@bgen(jjtree) Number */
    ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:{
        t = jj_consume_token(INTEGER);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      case REAL:{
        t = jj_consume_token(REAL);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final public String Value() throws ParseException {/*@bgen(jjtree) Value */
    ASTValue jjtn000 = new ASTValue(JJTVALUE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    String number;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:
      case REAL:{
        number = Number();
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
{if ("" != null) return number;}
        break;
        }
      case VAR:{
        t = jj_consume_token(VAR);
jjtn000.jjtSetValue(t.image);
jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
{if ("" != null) return t.image;}
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3_1()
 {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_scan_token(REAL)) return true;
    return false;
  }

  private boolean jj_3R_8()
 {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    }
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public TrainerParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x0,0x800,0x0,0x0,0xffe00000,0xffe00000,0x0,0x84000,0x0,0x0,0xffe00000,0x0,0x0,0x0,0xffe00000,0xffe00000,0xffe00000,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x200,0x800,0x0,0x200,0x800,0x1ffcaa5,0x1ffcaa5,0x800,0x0,0x4,0x10,0x1ffc2a5,0x10,0x10,0x10,0x1ffc2a5,0x1ffc001,0x1ffc001,0xa0,0x2a0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public TrainerParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TrainerParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new TrainerParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public TrainerParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new TrainerParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new TrainerParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public TrainerParser(TrainerParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(TrainerParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[57];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 20; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 57; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 2; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

/*
    public static void main(String args[]) {
	System.out.println("Reading from standard input...");
	TrainerParser t = new TrainerParser(System.in);
	try {
	    ASTTrainer n = t.Trainer();
	    n.dump("");
	    System.out.println("Thank you.");
	} catch (Exception e) {
	    System.out.println("Oops.");
	    System.out.println(e.getMessage());
	    e.printStackTrace();
	}
    }
    */
}
