/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. trainer.jj */
/*@egen*/options{
               
                 
    STATIC=false;
}

PARSER_BEGIN(TrainerParser)

package pilots.compiler.trainer.parser;

public class TrainerParser/*@bgen(jjtree)*/implements TrainerParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTTrainerParserState jjtree = new JJTTrainerParserState();

/*@egen*/
/*
    public static void main(String args[]) {
	System.out.println("Reading from standard input...");
	TrainerParser t = new TrainerParser(System.in);
	try {
	    ASTTrainer n = t.Trainer();
	    n.dump("");
	    System.out.println("Thank you.");
	} catch (Exception e) {
	    System.out.println("Oops.");
	    System.out.println(e.getMessage());
	    e.printStackTrace();
	}
    }
    */
}

PARSER_END(TrainerParser)

/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

/* Terminals */

TOKEN_MGR_DECLS :
{
  static int commentNesting; // Current level of nesting
}

/*** Skip whitespace and comments ***/
SKIP : {
" "
| "\t"
| "\n"
| "\r"
| "\r\n"
| "/*" { commentNesting=1; } : IN_COMMENT
}

<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
  < "/*" > { commentNesting++; } 
| < "*/" > { commentNesting--; if (commentNesting==0) SwitchTo(DEFAULT); }
}


/*** The keywords ***/
TOKEN : /* RESERVED TOKENS */
{
<PROGRAM_START : "trainer">
| <CONSTANTS: "constants">
| <DATA: "data">
| <FILE: "file">
| <MODEL: "model">
| <SEQUENCE: "sequence">
| <FEATURES: "features">
| <LABELS: "labels">
| <TEST_FEATURES: "test_features">
| <TEST_LABELS: "test_labels">
| <ALGORITHM: "algorithm">
| <USING: "using">
| <PROGRAM_END: "end">
| <SQRT: "sqrt">
| <SIN: "sin">
| <COS: "cos">
| <TAN: "tan">
| <ARCSIN: "asin">
| <ARCCOS: "acos">
| <ARCTAN: "atan">
| <ABS: "abs">
| <AND: "and">
| <OR: "or">
| <XOR: "xor">
| <NOT: "not">
}

TOKEN : /* Normal Tokens */
{
<#DIGIT : ["0"-"9"]>
| <LPAR: "(">
| <RPAR: ")">
| <COMMA: ",">
| <INTEGER : ("+" | "-")? (<DIGIT>)+>
| <#SCALEFACTOR : ("E" | "e") ("+" | "-")? (<DIGIT>)+>
| <REAL : ("+" | "-")? (<DIGIT>)+ "." (<DIGIT>)* (<SCALEFACTOR>)?>
| <#LETTER : ["A"-"Z","a"-"z","_","."]>
| <VAR : <LETTER> (<LETTER> | <DIGIT>)*>
| <STRING : "\"" (~["\""])* "\"" >
}

/**************************************/
/********** START OF GRAMMAR **********/
/**************************************/
/* Non-terminals */
ASTTrainer Trainer(): 
{/*@bgen(jjtree) Trainer */
    ASTTrainer jjtn000 = new ASTTrainer(JJTTRAINER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Trainer */
    try {
/*@egen*/
    <PROGRAM_START> t = <VAR> { jjtn000.jjtSetValue( t.image ); } ";"
        (<CONSTANTS> (";" | (Constant())*))?
	<DATA> (";" | (Data())*)
	<MODEL>
	  <FEATURES> ":" (";" | Feature()) ";"
	  <LABELS> ":" (";" | Label()) ";"
	  (<TEST_FEATURES> ":" (";" | Test_Feature()) ";")?
	  (<TEST_LABELS> ":" (";" | Test_Label()) ";")?
	  <ALGORITHM> ":" Algorithm() ";"
    <PROGRAM_END> (";")?/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Constant() :
{/*@bgen(jjtree) Constant */
    ASTConstant jjtn000 = new ASTConstant(JJTCONSTANT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String str, exp;
}
{/*@bgen(jjtree) Constant */
    try {
/*@egen*/
    str = Vars() "=" exp = Exp() ";"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.jjtSetValue( str + ":" + exp); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Data() :
{/*@bgen(jjtree) Data */
    ASTData jjtn000 = new ASTData(JJTDATA);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String str, str2;
}
{/*@bgen(jjtree) Data */
    try {
/*@egen*/
    str = Vars()
    { jjtn000.jjtSetValue(str); }
    <USING> ( str2 = File() | str2 = ModelUser() | str2 = Sequence() ) ";"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.jjtSetValue( str2 + ":" + str ); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String File() :
{/*@bgen(jjtree) File */
    ASTFile jjtn000 = new ASTFile(JJTFILE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token f;
}
{/*@bgen(jjtree) File */
    try {
/*@egen*/
    <FILE> "(" f = <STRING> ")"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return "file:" + f.image; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String ModelUser() :
{/*@bgen(jjtree) ModelUser */
    ASTModelUser jjtn000 = new ASTModelUser(JJTMODELUSER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String vars;
}
{/*@bgen(jjtree) ModelUser */
    try {
/*@egen*/
    <MODEL> "(" vars = Vars() ")"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return "model:" + vars; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Sequence() :
{/*@bgen(jjtree) Sequence */
    ASTSequence jjtn000 = new ASTSequence(JJTSEQUENCE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String start, step, len;
}
{/*@bgen(jjtree) Sequence */
    try {
/*@egen*/
    <SEQUENCE> "(" start = Number() "," step = Number() "," len = Number() ")"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return "sequence:" + start + ":" + step + ":" + len; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Feature() :
{/*@bgen(jjtree) Feature */
    ASTFeature jjtn000 = new ASTFeature(JJTFEATURE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String s;
}
{/*@bgen(jjtree) Feature */
    try {
/*@egen*/
    s = Exps()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.jjtSetValue( s ); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Label() :
{/*@bgen(jjtree) Label */
    ASTLabel jjtn000 = new ASTLabel(JJTLABEL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String s;
}
{/*@bgen(jjtree) Label */
    try {
/*@egen*/
    s = Exps()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.jjtSetValue( s ); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Test_Feature() :
{/*@bgen(jjtree) Test_Feature */
    ASTTest_Feature jjtn000 = new ASTTest_Feature(JJTTEST_FEATURE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String s;
}
{/*@bgen(jjtree) Test_Feature */
    try {
/*@egen*/
    s = Exps()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.jjtSetValue( s ); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Test_Label() :
{/*@bgen(jjtree) Test_Label */
    ASTTest_Label jjtn000 = new ASTTest_Label(JJTTEST_LABEL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String s;
}
{/*@bgen(jjtree) Test_Label */
    try {
/*@egen*/
    s = Exps()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.jjtSetValue( s ); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Algorithm() :
{/*@bgen(jjtree) Algorithm */
    ASTAlgorithm jjtn000 = new ASTAlgorithm(JJTALGORITHM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Algorithm */
    try {
/*@egen*/
    t = <VAR> ("(" Map() ")")?/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.jjtSetValue( t.image ); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Map() : {/*@bgen(jjtree) Map */
  ASTMap jjtn000 = new ASTMap(JJTMAP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Map */
    try {
/*@egen*/
    MapItem() ("," MapItem())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MapItem() :
{/*@bgen(jjtree) MapItem */
    ASTMapItem jjtn000 = new ASTMapItem(JJTMAPITEM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t1, t2 = null;
    String str = null;
}
{/*@bgen(jjtree) MapItem */
    try {
/*@egen*/
    t1 = <VAR> ":"
    (LOOKAHEAD(2) str = Number() |
     LOOKAHEAD(2) t2 = <VAR> | str = Exp())/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        if ( t2 != null ) {
            jjtn000.jjtSetValue( t1.image + ":" + t2.image );
        } else {
            jjtn000.jjtSetValue( t1.image + ":" + str );
        }
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Vars():
{/*@bgen(jjtree) Vars */
    ASTVars jjtn000 = new ASTVars(JJTVARS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
    String str;
}
{/*@bgen(jjtree) Vars */
    try {
/*@egen*/
    t = <VAR> { str = t.image; }
    ("," t = <VAR> { str += "," + t.image; })*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return str; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Exps(): 
{/*@bgen(jjtree) Exps */
    ASTExps jjtn000 = new ASTExps(JJTEXPS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String exp, temp;
}
{/*@bgen(jjtree) Exps */
    try {
/*@egen*/
    exp = Exp() ("," temp = Exp() { exp += ";" + temp; } )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return exp; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Exps2():
{/*@bgen(jjtree) Exps2 */
    ASTExps2 jjtn000 = new ASTExps2(JJTEXPS2);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String exp, temp;
}
{/*@bgen(jjtree) Exps2 */
    try {
/*@egen*/
    exp = Exp() ("," temp = Exp() { exp += "," + temp; } )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return exp; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Exp(): 
{/*@bgen(jjtree) Exp */
    ASTExp jjtn000 = new ASTExp(JJTEXP);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String func, exps, exp2, value, temp;
}
{/*@bgen(jjtree) Exp */
    try {
/*@egen*/
    func = Func() "(" exps = Exps2() ")" exp2 = Exp2()/*@bgen(jjtree)*/
                                                       {
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtc000 = false;
                                                       }
/*@egen*/ { return "|" + func + "|(" + exps + ")" + exp2; } 
    | "(" temp = Exp() ")" exp2 = Exp2()/*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                         }
/*@egen*/ { return "(" + temp + ")" + exp2; } 
    | value = Value() exp2 = Exp2()/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/ { return "[" + value + "]" + exp2; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Exp2(): 
{/*@bgen(jjtree) Exp2 */
    ASTExp2 jjtn000 = new ASTExp2(JJTEXP2);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String func, exp, exp2;
}
{/*@bgen(jjtree) Exp2 */
    try {
/*@egen*/
    func = Func() exp = Exp() exp2 = Exp2()/*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                            }
/*@egen*/ { return "{" + func + "}(" + exp + exp2 + ")"; } 
    | {}/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ { return ""; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Func(): 
{/*@bgen(jjtree) Func */
    ASTFunc jjtn000 = new ASTFunc(JJTFUNC);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Func */
    try {
/*@egen*/
    t = "+"/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ { return t.image; }
    | t = "-"/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ { return t.image; }
    | t = "*"/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ { return t.image; }
    | t = "/"/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ { return t.image; }
    | t = "^"/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ { return t.image; }
    | t = ">"/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ { return t.image; }
    | t = ">="/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ { return t.image; }
    | t = "<"/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ { return t.image; }
    | t = "<="/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ { return t.image; }
    | t = "!="/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ { return t.image; }
    | t = "=="/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ { return t.image; }
    | t = <AND>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { return t.image; }
    | t = <OR>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ { return t.image; }
    | t = <XOR>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { return t.image; }
    | t = <NOT>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { return t.image; }       
    | t = <SQRT>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { return t.image; }
    | t = <SIN>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { return t.image; }
    | t = <COS>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { return t.image; }
    | t = <TAN>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { return t.image; }
    | t = <ARCSIN>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ { return t.image; }
    | t = <ARCCOS>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ { return t.image; }
    | t = <ARCTAN>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ { return t.image; }
    | t = <ABS>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { return t.image; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Number(): 
{/*@bgen(jjtree) Number */
    ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Number */
    try {
/*@egen*/
    t = <INTEGER>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ { return t.image; }
    | t = <REAL>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { return t.image; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Value(): 
{/*@bgen(jjtree) Value */
    ASTValue jjtn000 = new ASTValue(JJTVALUE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
    String number;
}
{/*@bgen(jjtree) Value */
    try {
/*@egen*/
    number = Number()/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ { return number; }
    | t = <VAR> { jjtn000.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                  {
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
                                                  }
/*@egen*/ { return t.image; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}