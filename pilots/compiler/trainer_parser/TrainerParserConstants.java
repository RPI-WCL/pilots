/* Generated By:JJTree&JavaCC: Do not edit this line. TrainerParserConstants.java */
package pilots.compiler.trainer.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface TrainerParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PROGRAM_START = 10;
  /** RegularExpression Id. */
  int CONSTANTS = 11;
  /** RegularExpression Id. */
  int DATA = 12;
  /** RegularExpression Id. */
  int FILE = 13;
  /** RegularExpression Id. */
  int MODEL = 14;
  /** RegularExpression Id. */
  int SEQUENCE = 15;
  /** RegularExpression Id. */
  int FEATURES = 16;
  /** RegularExpression Id. */
  int LABELS = 17;
  /** RegularExpression Id. */
  int TEST_FEATURES = 18;
  /** RegularExpression Id. */
  int TEST_LABELS = 19;
  /** RegularExpression Id. */
  int ALGORITHM = 20;
  /** RegularExpression Id. */
  int USING = 21;
  /** RegularExpression Id. */
  int PROGRAM_END = 22;
  /** RegularExpression Id. */
  int SQRT = 23;
  /** RegularExpression Id. */
  int SIN = 24;
  /** RegularExpression Id. */
  int COS = 25;
  /** RegularExpression Id. */
  int TAN = 26;
  /** RegularExpression Id. */
  int ARCSIN = 27;
  /** RegularExpression Id. */
  int ARCCOS = 28;
  /** RegularExpression Id. */
  int ARCTAN = 29;
  /** RegularExpression Id. */
  int ABS = 30;
  /** RegularExpression Id. */
  int AND = 31;
  /** RegularExpression Id. */
  int OR = 32;
  /** RegularExpression Id. */
  int XOR = 33;
  /** RegularExpression Id. */
  int NOT = 34;
  /** RegularExpression Id. */
  int DIGIT = 35;
  /** RegularExpression Id. */
  int LPAR = 36;
  /** RegularExpression Id. */
  int RPAR = 37;
  /** RegularExpression Id. */
  int COMMA = 38;
  /** RegularExpression Id. */
  int INTEGER = 39;
  /** RegularExpression Id. */
  int SCALEFACTOR = 40;
  /** RegularExpression Id. */
  int REAL = 41;
  /** RegularExpression Id. */
  int LETTER = 42;
  /** RegularExpression Id. */
  int VAR = 43;
  /** RegularExpression Id. */
  int STRING = 44;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "\"/*\"",
    "<token of kind 7>",
    "\"/*\"",
    "\"*/\"",
    "\"trainer\"",
    "\"constants\"",
    "\"data\"",
    "\"file\"",
    "\"model\"",
    "\"sequence\"",
    "\"features\"",
    "\"labels\"",
    "\"test_features\"",
    "\"test_labels\"",
    "\"algorithm\"",
    "\"using\"",
    "\"end\"",
    "\"sqrt\"",
    "\"sin\"",
    "\"cos\"",
    "\"tan\"",
    "\"asin\"",
    "\"acos\"",
    "\"atan\"",
    "\"abs\"",
    "\"and\"",
    "\"or\"",
    "\"xor\"",
    "\"not\"",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\",\"",
    "<INTEGER>",
    "<SCALEFACTOR>",
    "<REAL>",
    "<LETTER>",
    "<VAR>",
    "<STRING>",
    "\";\"",
    "\":\"",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"!=\"",
    "\"==\"",
  };

}
